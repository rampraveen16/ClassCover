{"version":3,"sources":["Components/SelectBox/StatusBox.js","Components/CreateDate.js","Components/Mentor/Mentor.js","Components/Date.js","Components/Fliter/Filter.js","Container.js","App.js","serviceWorker.js","index.js"],"names":["status","props","style","background","color","id","onChange","change","className","value","getDateArray","start","end","arr","dt","Date","push","setDate","getDate","mentor","box","dateFrom","toDate","map","ele","index","key","detail","data","Fragment","name","phone","dateText","filterDate","split","toString","filterBox","Container","state","filter","mentors","selectBoxChange","e","target","setState","search","axios","get","then","res","this","lowercasedFilter","toLowerCase","mentorList","item","includes","class","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20a99747.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Box.css'\r\nfunction status(props)  {\r\n     return(\r\n         <select style={{ background: props.color}}id={props.id} onChange={props.change} className=\"box\">\r\n             <option value=\"A\">A</option>\r\n             <option value=\"A\">B</option>\r\n             <option value=\"Hi\">HI</option>\r\n             <option value=\"V\">V</option>\r\n             <option value=\"UA\">UA</option>\r\n         </select>\r\n     )\r\n}\r\n\r\nexport default status","export const getDateArray =(start, end) => {\r\n    let \r\n      arr = [],\r\n      dt = new Date(start);\r\n  \r\n    while (dt <= end) {\r\n      arr.push(new Date(dt));\r\n      dt.setDate(dt.getDate() + 1);\r\n    }\r\n    \r\n    return arr;\r\n  \r\n  }\r\n\r\n","import React from 'react';\r\nimport Status from '../SelectBox/StatusBox'\r\nimport { getDateArray } from '../CreateDate'\r\nimport './Mentor.css'\r\n\r\nfunction mentor(props) {\r\n      const dateList = getDateArray(props.dateFrom, props.toDate)\r\n\r\n      const box = dateList.map((ele, index)=>{\r\n            return <Status key={index}  id={props.detail.id} change={props.change} color={props.data.background}/>\r\n    });\r\n    return (\r\n        <React.Fragment>\r\n            <article>\r\n                <div className=\"leftBlock\">\r\n                    <p>{props.detail.name}</p>\r\n                    <p>{props.detail.phone}</p>\r\n                </div>\r\n            <div className=\"rightBlock selectBoxWrap\">\r\n                {box}\r\n            </div>\r\n            </article>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n  \r\n  export default mentor;","import React from \"react\";\r\nimport { getDateArray } from './CreateDate'\r\n\r\nfunction dateText(props)  {\r\n    const dateList = getDateArray(props.dateFrom, props.toDate)\r\n    const filterDate = dateList.map((ele,index)=>{\r\n        let split = ele.toString().split(' ')\r\n        return(\r\n            <div className=\"box\" key={index}>\r\n                <span>{split[0]} </span>\r\n                <span>{split[1]}</span>\r\n                <span>{split[2]}</span>\r\n            </div>\r\n        );\r\n    })\r\n     return(\r\n        <React.Fragment>\r\n            {filterDate}\r\n        </React.Fragment>\r\n     )\r\n}\r\n\r\nexport default dateText","import React from 'react';\r\n\r\nfunction filterBox(props) {\r\n\r\n     return(\r\n         <p></p>\r\n     )\r\n}\r\n\r\nexport default filterBox;\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport Mentor from './Components/Mentor/Mentor'\r\nimport DateText from './Components/Date'\r\nimport FliterBox from './Components/Fliter/Filter'\r\n\r\nclass Container extends Component {\r\n    \r\n    state = {\r\n        dateFrom: new Date(),\r\n        toDate:new Date(2020, 4, 30),\r\n        filter:'',\r\n        background:'',\r\n        mentors:[]\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/users').then((res)=>{\r\n            this.setState({\r\n                mentors: res.data\r\n            })\r\n        })\r\n    }\r\n    selectBoxChange= (e) => {\r\n        if(e.target.value==='UA') {\r\n            this.setState({ background:'#000'})\r\n        }\r\n    }\r\n    search = (e) => {\r\n        this.setState({ filter: e.target.value });\r\n    }\r\n    render() {\r\n        const { filter, mentors} = this.state;\r\n        const lowercasedFilter = filter.toLowerCase();\r\n        const filteredData = mentors.filter(item => {\r\n            return item.name.toLowerCase().includes(lowercasedFilter)\r\n          });\r\n        const mentorList =filteredData.map((ele,index)=>{\r\n            return <Mentor key ={index} detail = {ele} data = {this.state}dateFrom ={this.state.dateFrom} toDate ={this.state.toDate} change={this.selectBoxChange}/>\r\n        })\r\n        return(\r\n            <React.Fragment>\r\n                <section>\r\n                <div className=\"leftBlock\">\r\n                    <label>Search Name</label>\r\n                    <input  onChange={this.search}/>\r\n                </div>\r\n                <div className=\"rightBlock\">\r\n                    <FliterBox></FliterBox>\r\n                </div>\r\n                </section>\r\n            <section>\r\n                <div className=\"leftBlock\"></div>\r\n                <div className=\"rightBlock dateWrap\">\r\n                   <DateText dateFrom ={this.state.dateFrom} toDate ={this.state.toDate}/> \r\n                </div>\r\n            </section>\r\n            <section>\r\n            <h4 class=\"title\">Show Details(Subject and Tags)</h4>\r\n              <div className=\"mentorList\">\r\n               {mentorList}\r\n               </div>\r\n            </section>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container","import React from 'react';\nimport Container from './Container'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Container />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}